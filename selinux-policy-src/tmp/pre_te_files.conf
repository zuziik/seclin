# FLASK

#
# Define the security object classes
#

# Classes marked as userspace are classes
# for userspace object managers

class security
class process
class system
class capability

# file-related classes
class filesystem
class file
class dir
class fd
class lnk_file
class chr_file
class blk_file
class sock_file
class fifo_file

# network-related classes
class socket
class tcp_socket
class udp_socket
class rawip_socket
class node
class netif
class netlink_socket
class packet_socket
class key_socket
class unix_stream_socket
class unix_dgram_socket

# sysv-ipc-related classes
class sem
class msg
class msgq
class shm
class ipc

#
# userspace object manager classes
#

# passwd/chfn/chsh
class passwd			# userspace

# SE-X Windows stuff (more classes below)
class x_drawable		# userspace
class x_screen			# userspace
class x_gc			# userspace
class x_font			# userspace
class x_colormap		# userspace
class x_property		# userspace
class x_selection		# userspace
class x_cursor			# userspace
class x_client			# userspace
class x_device			# userspace
class x_server			# userspace
class x_extension		# userspace

# extended netlink sockets
class netlink_route_socket
class netlink_firewall_socket
class netlink_tcpdiag_socket
class netlink_nflog_socket
class netlink_xfrm_socket
class netlink_selinux_socket
class netlink_audit_socket
class netlink_ip6fw_socket
class netlink_dnrt_socket

class dbus			# userspace
class nscd			# userspace

# IPSec association
class association

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket

class appletalk_socket

class packet

# Kernel access key retention
class key

class context			# userspace

class dccp_socket

class memprotect

class db_database		# userspace
class db_table			# userspace
class db_procedure		# userspace
class db_column			# userspace
class db_tuple			# userspace
class db_blob			# userspace
class db_exception		# userspace
class db_datatype		# userspace

# network peer labels
class peer

# Capabilities >= 32
class capability2

# More SE-X Windows stuff
class x_resource		# userspace
class x_event			# userspace
class x_synthetic_event		# userspace
class x_application_data	# userspace

# kernel services that need to override task security, e.g. cachefiles
class kernel_service

class tun_socket

class binder

# Updated netlink classes for more recent netlink protocols.
class netlink_iscsi_socket
class netlink_fib_lookup_socket
class netlink_connector_socket
class netlink_netfilter_socket
class netlink_generic_socket
class netlink_scsitransport_socket
class netlink_rdma_socket
class netlink_crypto_socket

# Still More SE-X Windows stuff
class x_pointer			# userspace
class x_keyboard		# userspace

# More Database stuff
class db_schema			# userspace
class db_view			# userspace
class db_sequence		# userspace
class db_language		# userspace

class service			# userspace

# Capability checks when on a non-init user namespace
class cap_userns
class cap2_userns

# FLASK
# FLASK

#
# Define initial security identifiers 
#

sid kernel
sid security
sid unlabeled
sid fs
sid file
sid file_labels
sid init
sid any_socket
sid port
sid netif
sid netmsg
sid node
sid igmp_packet
sid icmp_socket
sid tcp_socket
sid sysctl_modprobe
sid sysctl
sid sysctl_fs
sid sysctl_kernel
sid sysctl_net
sid sysctl_net_unix
sid sysctl_vm
sid sysctl_dev
sid kmod
sid policy
sid scmp_packet
sid devnull

# FLASK
#
# Define common prefixes for access vectors
#
# common common_name { permission_name ... }


#
# Define a common prefix for file access vectors.
#

common file
{
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
	unlink
	link
	rename
	execute
	swapon
	quotaon
	mounton
}


#
# Define a common prefix for socket access vectors.
#

common socket
{
# inherited from file
	ioctl
	read
	write
	create
	getattr
	setattr
	lock
	relabelfrom
	relabelto
	append
# socket-specific
	bind
	connect
	listen
	accept
	getopt
	setopt
	shutdown
	recvfrom
	sendto
	recv_msg
	send_msg
	name_bind
}

#
# Define a common prefix for ipc access vectors.
#

common ipc
{
	create
	destroy
	getattr
	setattr
	read
	write
	associate
	unix_read
	unix_write
}

#
#  Define a common prefix for userspace database object access vectors.
#

common database
{
	create
	drop
	getattr
	setattr
	relabelfrom
	relabelto
}

#
# Define a common prefix for pointer and keyboard access vectors.
#

common x_device
{
	getattr
	setattr
	use
	read
	write
	getfocus
	setfocus
	bell
	force_cursor
	freeze
	grab
	manage
	list_property
	get_property
	set_property
	add
	remove
	create
	destroy
}

#
# Define a common for capability access vectors.
#
common cap
{
	# The capabilities are defined in include/linux/capability.h
	# Capabilities >= 32 are defined in the cap2 common.
	# Care should be taken to ensure that these are consistent with
	# those definitions. (Order matters)

	chown
	dac_override
	dac_read_search
	fowner
	fsetid
	kill
	setgid
	setuid
	setpcap
	linux_immutable
	net_bind_service
	net_broadcast
	net_admin
	net_raw
	ipc_lock
	ipc_owner
	sys_module
	sys_rawio
	sys_chroot
	sys_ptrace
	sys_pacct
	sys_admin
	sys_boot
	sys_nice
	sys_resource
	sys_time
	sys_tty_config
	mknod
	lease
	audit_write
	audit_control
	setfcap
}

common cap2
{
	mac_override	# unused by SELinux
	mac_admin	# unused by SELinux
	syslog
	wake_alarm
	block_suspend
	audit_read
}

#
# Define the access vectors.
#
# class class_name [ inherits common_name ] { permission_name ... }


#
# Define the access vector interpretation for file-related objects.
#

class filesystem
{
	mount
	remount
	unmount
	getattr
	relabelfrom
	relabelto
	transition
	associate
	quotamod
	quotaget
}

class dir
inherits file
{
	add_name
	remove_name
	reparent
	search
	rmdir
	open
	audit_access
	execmod
}

class file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class lnk_file
inherits file
{
	open
	audit_access
	execmod
}

class chr_file
inherits file
{
	execute_no_trans
	entrypoint
	execmod
	open
	audit_access
}

class blk_file
inherits file
{
	open
	audit_access
	execmod
}

class sock_file
inherits file
{
	open
	audit_access
	execmod
}

class fifo_file
inherits file
{
	open
	audit_access
	execmod
}

class fd
{
	use
}


#
# Define the access vector interpretation for network-related objects.
#

class socket
inherits socket

class tcp_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
	node_bind
	name_connect
}

class udp_socket
inherits socket
{
	node_bind
}

class rawip_socket
inherits socket
{
	node_bind
}

class node
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	enforce_dest
	dccp_recv
	dccp_send
	recvfrom
	sendto
}

class netif
{
	tcp_recv
	tcp_send
	udp_recv
	udp_send
	rawip_recv
	rawip_send
	dccp_recv
	dccp_send
	ingress
	egress
}

class netlink_socket
inherits socket

class packet_socket
inherits socket

class key_socket
inherits socket

class unix_stream_socket
inherits socket
{
	connectto
	newconn
	acceptfrom
}

class unix_dgram_socket
inherits socket

#
# Define the access vector interpretation for process-related objects
#

class process
{
	fork
	transition
	sigchld # commonly granted from child to parent
	sigkill # cannot be caught or ignored
	sigstop # cannot be caught or ignored
	signull # for kill(pid, 0)
	signal  # all other signals
	ptrace
	getsched
	setsched
	getsession
	getpgid
	setpgid
	getcap
	setcap
	share
	getattr
	setexec
	setfscreate
	noatsecure
	siginh
	setrlimit
	rlimitinh
	dyntransition
	setcurrent
	execmem
	execstack
	execheap
	setkeycreate
	setsockcreate
}


#
# Define the access vector interpretation for ipc-related objects
#

class ipc
inherits ipc

class sem
inherits ipc

class msgq
inherits ipc
{
	enqueue
}

class msg
{
	send
	receive
}

class shm
inherits ipc
{
	lock
}


#
# Define the access vector interpretation for the security server.
#

class security
{
	compute_av
	compute_create
	compute_member
	check_context
	load_policy
	compute_relabel
	compute_user
	setenforce     # was avc_toggle in system class
	setbool
	setsecparam
	setcheckreqprot
	read_policy
	validate_trans
}


#
# Define the access vector interpretation for system operations.
#

class system
{
	ipc_info
	syslog_read  
	syslog_mod
	syslog_console
	module_request
	module_load

	# these are overloaded userspace
	# permissions from systemd
	halt
	reboot
	status
	start
	stop
	enable
	disable
	reload
}

#
# Define the access vector interpretation for controlling capabilities
#

class capability
inherits cap

class capability2
inherits cap2

#
# Define the access vector interpretation for controlling
# changes to passwd information.
#
class passwd
{
	passwd	# change another user passwd
	chfn	# change another user finger info
	chsh	# change another user shell
	rootok  # pam_rootok check (skip auth)
	crontab # crontab on another user
}

#
# SE-X Windows stuff
#
class x_drawable
{
	create
	destroy
	read
	write
	blend
	getattr
	setattr
	list_child
	add_child
	remove_child
	list_property
	get_property
	set_property
	manage
	override
	show
	hide
	send
	receive
}

class x_screen
{
	getattr
	setattr
	hide_cursor
	show_cursor
	saver_getattr
	saver_setattr
	saver_hide
	saver_show
}

class x_gc
{
	create
	destroy
	getattr
	setattr
	use
}

class x_font
{
	create
	destroy
	getattr
	add_glyph
	remove_glyph
	use
}

class x_colormap
{
	create
	destroy
	read
	write
	getattr
	add_color
	remove_color
	install
	uninstall
	use
}

class x_property
{
	create
	destroy
	read
	write
	append
	getattr
	setattr
}

class x_selection
{
	read
	write
	getattr
	setattr
}

class x_cursor
{
	create
	destroy
	read
	write
	getattr
	setattr
	use
}

class x_client
{
	destroy
	getattr
	setattr
	manage
}

class x_device
inherits x_device

class x_server
{
	getattr
	setattr
	record
	debug
	grab
	manage
}

class x_extension
{
	query
	use
}

class x_resource
{
	read
	write
}

class x_event
{
	send
	receive
}

class x_synthetic_event
{
	send
	receive
}

#
# Extended Netlink classes
#
class netlink_route_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_firewall_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_tcpdiag_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_nflog_socket
inherits socket

class netlink_xfrm_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_selinux_socket
inherits socket

class netlink_audit_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
	nlmsg_relay
	nlmsg_readpriv
	nlmsg_tty_audit
}

class netlink_ip6fw_socket
inherits socket
{
	nlmsg_read
	nlmsg_write
}

class netlink_dnrt_socket
inherits socket

# Define the access vector interpretation for controlling
# access and communication through the D-BUS messaging
# system.
#
class dbus
{
	acquire_svc
	send_msg
}

# Define the access vector interpretation for controlling
# access through the name service cache daemon (nscd).
#
class nscd
{
	getpwd
	getgrp
	gethost
	getstat
	admin
	shmempwd
	shmemgrp
	shmemhost
	getserv
	shmemserv
}

# Define the access vector interpretation for controlling
# access to IPSec network data by association
#
class association
{
	sendto
	recvfrom
	setcontext
	polmatch
}

# Updated Netlink class for KOBJECT_UEVENT family.
class netlink_kobject_uevent_socket
inherits socket

class appletalk_socket
inherits socket

class packet
{
	send
	recv
	relabelto
	flow_in		# deprecated
	flow_out	# deprecated
	forward_in
	forward_out
}

class key
{
	view
	read
	write
	search
	link
	setattr
	create
}

class context
{
	translate
	contains
}

class dccp_socket
inherits socket
{
	node_bind
	name_connect
}

class memprotect
{
	mmap_zero
}

class db_database
inherits database
{
	access
	install_module
	load_module
	get_param	# deprecated
	set_param	# deprecated
}

class db_table
inherits database
{
	select
	update
	insert
	delete
	lock
}

class db_procedure
inherits database
{
	execute
	entrypoint
	install
}

class db_column
inherits database
{
	select
	update
	insert
}

class db_tuple
{
	relabelfrom
	relabelto
	use
	select
	update
	insert
	delete
}

class db_blob
inherits database
{
	read
	write
	import
	export
}

class db_exception
inherits database
{
	use
}

class db_datatype
inherits database
{
	use
}

# network peer labels
class peer
{
	recv
}

class x_application_data
{
	paste
	paste_after_confirm
	copy
}

class kernel_service
{
	use_as_override
	create_files_as
}

class tun_socket
inherits socket
{
	attach_queue
}

class binder
{
	impersonate
	call
	set_context_mgr
	transfer
}

class netlink_iscsi_socket
inherits socket

class netlink_fib_lookup_socket
inherits socket

class netlink_connector_socket
inherits socket

class netlink_netfilter_socket
inherits socket

class netlink_generic_socket
inherits socket

class netlink_scsitransport_socket
inherits socket

class netlink_rdma_socket
inherits socket

class netlink_crypto_socket
inherits socket

class x_pointer
inherits x_device

class x_keyboard
inherits x_device

class db_schema
inherits database
{
	search
	add_name
	remove_name
}

class db_view
inherits database
{
	expand
}

class db_sequence
inherits database
{
	get_value
	next_value
	set_value
}

class db_language
inherits database
{
	implement
	execute
}

class service
{
	start
	stop
	status
	reload
	enable
	disable
}

#
# Define the access vector interpretation for controlling capabilities
# in user namespaces
#
class cap_userns
inherits cap

class cap2_userns
inherits cap2
# Override default policy behaviors when creating new contexts.
#
# Behavior for each of the four components of the context can
# be specified, for each object class.
#
# Examples:
#
#default_user process source;
#default_role process source;
#default_type process source;
#default_range process source low;
 
#
# Define sensitivities 
#
# MCS is single-sensitivity.


# Each sensitivity has a name and zero or more aliases.
sensitivity s0;


# Define the ordering of the sensitivity levels (least to greatest)
dominance { s0  }


#
# Define the categories
#
# Generate declarations

category c0;
category c1;
category c2;
category c3;
category c4;
category c5;
category c6;
category c7;
category c8;
category c9;
category c10;
category c11;
category c12;
category c13;
category c14;
category c15;
category c16;
category c17;
category c18;
category c19;
category c20;
category c21;
category c22;
category c23;
category c24;
category c25;
category c26;
category c27;
category c28;
category c29;
category c30;
category c31;
category c32;
category c33;
category c34;
category c35;
category c36;
category c37;
category c38;
category c39;
category c40;
category c41;
category c42;
category c43;
category c44;
category c45;
category c46;
category c47;
category c48;
category c49;
category c50;
category c51;
category c52;
category c53;
category c54;
category c55;
category c56;
category c57;
category c58;
category c59;
category c60;
category c61;
category c62;
category c63;
category c64;
category c65;
category c66;
category c67;
category c68;
category c69;
category c70;
category c71;
category c72;
category c73;
category c74;
category c75;
category c76;
category c77;
category c78;
category c79;
category c80;
category c81;
category c82;
category c83;
category c84;
category c85;
category c86;
category c87;
category c88;
category c89;
category c90;
category c91;
category c92;
category c93;
category c94;
category c95;
category c96;
category c97;
category c98;
category c99;
category c100;
category c101;
category c102;
category c103;
category c104;
category c105;
category c106;
category c107;
category c108;
category c109;
category c110;
category c111;
category c112;
category c113;
category c114;
category c115;
category c116;
category c117;
category c118;
category c119;
category c120;
category c121;
category c122;
category c123;
category c124;
category c125;
category c126;
category c127;
category c128;
category c129;
category c130;
category c131;
category c132;
category c133;
category c134;
category c135;
category c136;
category c137;
category c138;
category c139;
category c140;
category c141;
category c142;
category c143;
category c144;
category c145;
category c146;
category c147;
category c148;
category c149;
category c150;
category c151;
category c152;
category c153;
category c154;
category c155;
category c156;
category c157;
category c158;
category c159;
category c160;
category c161;
category c162;
category c163;
category c164;
category c165;
category c166;
category c167;
category c168;
category c169;
category c170;
category c171;
category c172;
category c173;
category c174;
category c175;
category c176;
category c177;
category c178;
category c179;
category c180;
category c181;
category c182;
category c183;
category c184;
category c185;
category c186;
category c187;
category c188;
category c189;
category c190;
category c191;
category c192;
category c193;
category c194;
category c195;
category c196;
category c197;
category c198;
category c199;
category c200;
category c201;
category c202;
category c203;
category c204;
category c205;
category c206;
category c207;
category c208;
category c209;
category c210;
category c211;
category c212;
category c213;
category c214;
category c215;
category c216;
category c217;
category c218;
category c219;
category c220;
category c221;
category c222;
category c223;
category c224;
category c225;
category c226;
category c227;
category c228;
category c229;
category c230;
category c231;
category c232;
category c233;
category c234;
category c235;
category c236;
category c237;
category c238;
category c239;
category c240;
category c241;
category c242;
category c243;
category c244;
category c245;
category c246;
category c247;
category c248;
category c249;
category c250;
category c251;
category c252;
category c253;
category c254;
category c255;
category c256;
category c257;
category c258;
category c259;
category c260;
category c261;
category c262;
category c263;
category c264;
category c265;
category c266;
category c267;
category c268;
category c269;
category c270;
category c271;
category c272;
category c273;
category c274;
category c275;
category c276;
category c277;
category c278;
category c279;
category c280;
category c281;
category c282;
category c283;
category c284;
category c285;
category c286;
category c287;
category c288;
category c289;
category c290;
category c291;
category c292;
category c293;
category c294;
category c295;
category c296;
category c297;
category c298;
category c299;
category c300;
category c301;
category c302;
category c303;
category c304;
category c305;
category c306;
category c307;
category c308;
category c309;
category c310;
category c311;
category c312;
category c313;
category c314;
category c315;
category c316;
category c317;
category c318;
category c319;
category c320;
category c321;
category c322;
category c323;
category c324;
category c325;
category c326;
category c327;
category c328;
category c329;
category c330;
category c331;
category c332;
category c333;
category c334;
category c335;
category c336;
category c337;
category c338;
category c339;
category c340;
category c341;
category c342;
category c343;
category c344;
category c345;
category c346;
category c347;
category c348;
category c349;
category c350;
category c351;
category c352;
category c353;
category c354;
category c355;
category c356;
category c357;
category c358;
category c359;
category c360;
category c361;
category c362;
category c363;
category c364;
category c365;
category c366;
category c367;
category c368;
category c369;
category c370;
category c371;
category c372;
category c373;
category c374;
category c375;
category c376;
category c377;
category c378;
category c379;
category c380;
category c381;
category c382;
category c383;
category c384;
category c385;
category c386;
category c387;
category c388;
category c389;
category c390;
category c391;
category c392;
category c393;
category c394;
category c395;
category c396;
category c397;
category c398;
category c399;
category c400;
category c401;
category c402;
category c403;
category c404;
category c405;
category c406;
category c407;
category c408;
category c409;
category c410;
category c411;
category c412;
category c413;
category c414;
category c415;
category c416;
category c417;
category c418;
category c419;
category c420;
category c421;
category c422;
category c423;
category c424;
category c425;
category c426;
category c427;
category c428;
category c429;
category c430;
category c431;
category c432;
category c433;
category c434;
category c435;
category c436;
category c437;
category c438;
category c439;
category c440;
category c441;
category c442;
category c443;
category c444;
category c445;
category c446;
category c447;
category c448;
category c449;
category c450;
category c451;
category c452;
category c453;
category c454;
category c455;
category c456;
category c457;
category c458;
category c459;
category c460;
category c461;
category c462;
category c463;
category c464;
category c465;
category c466;
category c467;
category c468;
category c469;
category c470;
category c471;
category c472;
category c473;
category c474;
category c475;
category c476;
category c477;
category c478;
category c479;
category c480;
category c481;
category c482;
category c483;
category c484;
category c485;
category c486;
category c487;
category c488;
category c489;
category c490;
category c491;
category c492;
category c493;
category c494;
category c495;
category c496;
category c497;
category c498;
category c499;
category c500;
category c501;
category c502;
category c503;
category c504;
category c505;
category c506;
category c507;
category c508;
category c509;
category c510;
category c511;
category c512;
category c513;
category c514;
category c515;
category c516;
category c517;
category c518;
category c519;
category c520;
category c521;
category c522;
category c523;
category c524;
category c525;
category c526;
category c527;
category c528;
category c529;
category c530;
category c531;
category c532;
category c533;
category c534;
category c535;
category c536;
category c537;
category c538;
category c539;
category c540;
category c541;
category c542;
category c543;
category c544;
category c545;
category c546;
category c547;
category c548;
category c549;
category c550;
category c551;
category c552;
category c553;
category c554;
category c555;
category c556;
category c557;
category c558;
category c559;
category c560;
category c561;
category c562;
category c563;
category c564;
category c565;
category c566;
category c567;
category c568;
category c569;
category c570;
category c571;
category c572;
category c573;
category c574;
category c575;
category c576;
category c577;
category c578;
category c579;
category c580;
category c581;
category c582;
category c583;
category c584;
category c585;
category c586;
category c587;
category c588;
category c589;
category c590;
category c591;
category c592;
category c593;
category c594;
category c595;
category c596;
category c597;
category c598;
category c599;
category c600;
category c601;
category c602;
category c603;
category c604;
category c605;
category c606;
category c607;
category c608;
category c609;
category c610;
category c611;
category c612;
category c613;
category c614;
category c615;
category c616;
category c617;
category c618;
category c619;
category c620;
category c621;
category c622;
category c623;
category c624;
category c625;
category c626;
category c627;
category c628;
category c629;
category c630;
category c631;
category c632;
category c633;
category c634;
category c635;
category c636;
category c637;
category c638;
category c639;
category c640;
category c641;
category c642;
category c643;
category c644;
category c645;
category c646;
category c647;
category c648;
category c649;
category c650;
category c651;
category c652;
category c653;
category c654;
category c655;
category c656;
category c657;
category c658;
category c659;
category c660;
category c661;
category c662;
category c663;
category c664;
category c665;
category c666;
category c667;
category c668;
category c669;
category c670;
category c671;
category c672;
category c673;
category c674;
category c675;
category c676;
category c677;
category c678;
category c679;
category c680;
category c681;
category c682;
category c683;
category c684;
category c685;
category c686;
category c687;
category c688;
category c689;
category c690;
category c691;
category c692;
category c693;
category c694;
category c695;
category c696;
category c697;
category c698;
category c699;
category c700;
category c701;
category c702;
category c703;
category c704;
category c705;
category c706;
category c707;
category c708;
category c709;
category c710;
category c711;
category c712;
category c713;
category c714;
category c715;
category c716;
category c717;
category c718;
category c719;
category c720;
category c721;
category c722;
category c723;
category c724;
category c725;
category c726;
category c727;
category c728;
category c729;
category c730;
category c731;
category c732;
category c733;
category c734;
category c735;
category c736;
category c737;
category c738;
category c739;
category c740;
category c741;
category c742;
category c743;
category c744;
category c745;
category c746;
category c747;
category c748;
category c749;
category c750;
category c751;
category c752;
category c753;
category c754;
category c755;
category c756;
category c757;
category c758;
category c759;
category c760;
category c761;
category c762;
category c763;
category c764;
category c765;
category c766;
category c767;
category c768;
category c769;
category c770;
category c771;
category c772;
category c773;
category c774;
category c775;
category c776;
category c777;
category c778;
category c779;
category c780;
category c781;
category c782;
category c783;
category c784;
category c785;
category c786;
category c787;
category c788;
category c789;
category c790;
category c791;
category c792;
category c793;
category c794;
category c795;
category c796;
category c797;
category c798;
category c799;
category c800;
category c801;
category c802;
category c803;
category c804;
category c805;
category c806;
category c807;
category c808;
category c809;
category c810;
category c811;
category c812;
category c813;
category c814;
category c815;
category c816;
category c817;
category c818;
category c819;
category c820;
category c821;
category c822;
category c823;
category c824;
category c825;
category c826;
category c827;
category c828;
category c829;
category c830;
category c831;
category c832;
category c833;
category c834;
category c835;
category c836;
category c837;
category c838;
category c839;
category c840;
category c841;
category c842;
category c843;
category c844;
category c845;
category c846;
category c847;
category c848;
category c849;
category c850;
category c851;
category c852;
category c853;
category c854;
category c855;
category c856;
category c857;
category c858;
category c859;
category c860;
category c861;
category c862;
category c863;
category c864;
category c865;
category c866;
category c867;
category c868;
category c869;
category c870;
category c871;
category c872;
category c873;
category c874;
category c875;
category c876;
category c877;
category c878;
category c879;
category c880;
category c881;
category c882;
category c883;
category c884;
category c885;
category c886;
category c887;
category c888;
category c889;
category c890;
category c891;
category c892;
category c893;
category c894;
category c895;
category c896;
category c897;
category c898;
category c899;
category c900;
category c901;
category c902;
category c903;
category c904;
category c905;
category c906;
category c907;
category c908;
category c909;
category c910;
category c911;
category c912;
category c913;
category c914;
category c915;
category c916;
category c917;
category c918;
category c919;
category c920;
category c921;
category c922;
category c923;
category c924;
category c925;
category c926;
category c927;
category c928;
category c929;
category c930;
category c931;
category c932;
category c933;
category c934;
category c935;
category c936;
category c937;
category c938;
category c939;
category c940;
category c941;
category c942;
category c943;
category c944;
category c945;
category c946;
category c947;
category c948;
category c949;
category c950;
category c951;
category c952;
category c953;
category c954;
category c955;
category c956;
category c957;
category c958;
category c959;
category c960;
category c961;
category c962;
category c963;
category c964;
category c965;
category c966;
category c967;
category c968;
category c969;
category c970;
category c971;
category c972;
category c973;
category c974;
category c975;
category c976;
category c977;
category c978;
category c979;
category c980;
category c981;
category c982;
category c983;
category c984;
category c985;
category c986;
category c987;
category c988;
category c989;
category c990;
category c991;
category c992;
category c993;
category c994;
category c995;
category c996;
category c997;
category c998;
category c999;
category c1000;
category c1001;
category c1002;
category c1003;
category c1004;
category c1005;
category c1006;
category c1007;
category c1008;
category c1009;
category c1010;
category c1011;
category c1012;
category c1013;
category c1014;
category c1015;
category c1016;
category c1017;
category c1018;
category c1019;
category c1020;
category c1021;
category c1022;
category c1023;


#
# Each MCS level specifies a sensitivity and zero or more categories which may
# be associated with that sensitivity.
#

level s0:c0.c1023;


#
# Define the MCS policy
#
# mlsconstrain class_set perm_set expression ;
#
# mlsvalidatetrans class_set expression ;
#
# expression : ( expression )
#	     | not expression
#	     | expression and expression
#	     | expression or expression
#	     | u1 op u2
#	     | r1 role_mls_op r2
#	     | t1 op t2
#	     | l1 role_mls_op l2
#	     | l1 role_mls_op h2
#	     | h1 role_mls_op l2
#	     | h1 role_mls_op h2
#	     | l1 role_mls_op h1
#	     | l2 role_mls_op h2
#	     | u1 op names
#	     | u2 op names
#	     | r1 op names
#	     | r2 op names
#	     | t1 op names
#	     | t2 op names
#	     | u3 op names (NOTE: this is only available for mlsvalidatetrans)
#	     | r3 op names (NOTE: this is only available for mlsvalidatetrans)
#	     | t3 op names (NOTE: this is only available for mlsvalidatetrans)
#
# op : == | !=
# role_mls_op : == | != | eq | dom | domby | incomp
#
# names : name | { name_list }
# name_list : name | name_list name
#

#
# MCS policy for the file classes
#
# Constrain file access so that the high range of the process dominates
# the high range of the file.  We use the high range of the process so
# that processes can always simply run at s0.
#
# Note:
#  - getattr on dirs/files is not constrained.
#  - /proc/pid operations are not constrained.

mlsconstrain file { read ioctl lock execute execute_no_trans }
	(( h1 dom h2 ) or ( t1 == mcsreadall ) or
	(( t1 != mcs_constrained_type ) and (t2 == domain)));

mlsconstrain file { write setattr append unlink link rename }
	(( h1 dom h2 ) or ( t1 == mcswriteall ) or
	(( t1 != mcs_constrained_type ) and (t2 == domain)));

mlsconstrain dir { search read ioctl lock }
	(( h1 dom h2 ) or ( t1 == mcsreadall ) or
	(( t1 != mcs_constrained_type ) and (t2 == domain)));

mlsconstrain dir { write setattr append unlink link rename add_name remove_name }
	(( h1 dom h2 ) or ( t1 == mcswriteall ) or
	(( t1 != mcs_constrained_type ) and (t2 == domain)));

mlsconstrain fifo_file { open }
	(( h1 dom h2 ) or ( t1 == mcsreadall ) or
	(( t1 != mcs_constrained_type ) and ( t2 == domain )));

mlsconstrain { lnk_file chr_file blk_file sock_file } { getattr read ioctl }
	(( h1 dom h2 ) or ( t1 == mcsreadall ) or
	(( t1 != mcs_constrained_type ) and (t2 == domain)));

mlsconstrain { lnk_file chr_file blk_file sock_file } { write setattr }
	(( h1 dom h2 ) or ( t1 == mcswriteall ) or
	(( t1 != mcs_constrained_type ) and (t2 == domain)));

# New filesystem object labels must be dominated by the relabeling subject
# clearance, also the objects are single-level.
mlsconstrain file { create relabelto }
	(( h1 dom h2 ) and ( l2 eq h2 ));

# new file labels must be dominated by the relabeling subject clearance
mlsconstrain { dir file lnk_file chr_file blk_file sock_file fifo_file } { relabelfrom }
	( h1 dom h2 );

mlsconstrain { dir file lnk_file chr_file blk_file sock_file fifo_file } { create relabelto }
	(( h1 dom h2 ) and ( l2 eq h2 ));

mlsconstrain process { transition dyntransition }
	(( h1 dom h2 ) or ( t1 == mcssetcats ));

mlsconstrain process { ptrace }
	(( h1 dom h2) or ( t1 == mcsptraceall ));

mlsconstrain process { sigkill sigstop }
	(( h1 dom h2 ) or ( t1 == mcskillall ));

mlsconstrain process { signal }
	(( h1 dom h2 ) or ( t1 != mcs_constrained_type ));

mlsconstrain { tcp_socket udp_socket rawip_socket } node_bind
	(( h1 dom h2 ) or ( t1 != mcs_constrained_type ));

#
# MCS policy for SELinux-enabled databases
#

# Any database object must be dominated by the relabeling subject
# clearance, also the objects are single-level.
mlsconstrain { db_database db_schema db_table db_sequence db_view db_procedure db_language db_column db_blob } { create relabelto }
	(( h1 dom h2 ) and ( l2 eq h2 ));

mlsconstrain { db_tuple } { insert relabelto }
	(( h1 dom h2 ) and ( l2 eq h2 ));

# Access control for any database objects based on MCS rules.
mlsconstrain db_database { drop getattr setattr relabelfrom access install_module load_module get_param set_param }
	( h1 dom h2 );

mlsconstrain db_schema { drop getattr setattr relabelfrom search }
	( h1 dom h2 );

mlsconstrain db_table { drop getattr setattr relabelfrom select update insert delete lock }
	( h1 dom h2 );

mlsconstrain db_column { drop getattr setattr relabelfrom select update insert }
	( h1 dom h2 );

mlsconstrain db_tuple { relabelfrom select update delete use }
	( h1 dom h2 );

mlsconstrain db_sequence { drop getattr setattr relabelfrom get_value next_value set_value }
	( h1 dom h2 );

mlsconstrain db_view { drop getattr setattr relabelfrom expand }
	( h1 dom h2 );

mlsconstrain db_procedure { drop getattr setattr relabelfrom execute install entrypoint }
	( h1 dom h2 );

mlsconstrain db_language { drop getattr setattr relabelfrom execute }
	( h1 dom h2 );

mlsconstrain db_blob { drop getattr setattr relabelfrom read write import export }
	( h1 dom h2 );

 #
# This file contains the policy capabilites
# that are enabled in this policy, not a
# declaration of DAC capabilites such as
# dac_override.
#
# The affected object classes and their
# permissions should also be listed in
# the comments for each capability.
#

# Enable additional networking access control for
# labeled networking peers.
#
# Checks enabled:
# node: sendto recvfrom
# netif: ingress egress
# peer: recv
#
policycap network_peer_controls;

# Enable additional access controls for opening
# a file (and similar objects).
#
# Checks enabled:
# dir: open
# file: open
# fifo_file: open
# sock_file: open
# chr_file: open
# blk_file: open
#
policycap open_perms;

# Always enforce network access controls, even
# if labeling is not configured for them.
# Available in kernel 3.13+
#
# Checks enabled:
# packet: send recv
# peer: recv
#
# policycap always_check_network;
